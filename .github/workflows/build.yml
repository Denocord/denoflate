name: Build - Rust

on:
    push:
        branches:
            - master
        paths:
            - src/**
            - .github/workflows/**
            - Cargo.toml

jobs:
    build:
        name: Build for ${{ matrix.config.os }}
        runs-on: ${{ matrix.config.os }}
        timeout-minutes: 60
        strategy:
            matrix:
              config:
                - os: macos-latest
                  filename: libdenoflate.dylib
                - os: windows-latest
                  filename: denoflate.dll
                - os: ubuntu-latest
                  filename: libdenoflate.so
        steps:
            - name: Clone repository
              uses: actions/checkout@v1

            - name: Install rust
              uses: hecrj/setup-rust-action@v1
              with:
                rust-version: "1.43.1"
            - name: Cache cargo registry
              uses: actions/cache@v1
              with:
                path: ~/.cargo/registry
                key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.toml') }}
            - name: Cache cargo index
              uses: actions/cache@v1
              with:
                path: ~/.cargo/git
                key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.toml') }}
            - name: Cache build files
              uses: actions/cache@v1
              with:
                path: target
                key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.toml') }}
      
            - name: Build
              env:
                RUST_BACKTRACE: 1
              run: cargo build --release

            - name: Strip debug symbols
              if: runner.os != 'windows-latest'
              run: |
                STRIPOPTS=""
                if uname | grep -qi "darwin"; then
                  STRIPOPTS="-x"
                fi
                strip $STRIPOPTS target/release/${{ matrix.config.filename }}
            - name: Create a release
              id: create_release
              uses: actions/create-release@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                tag_name: "release draft for ${{ github.ref }}"
                draft: true
            - name: Upload Release Asset
              id: upload-release-asset 
              uses: actions/upload-release-asset@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                upload_url: ${{ steps.create_release.outputs.upload_url }}
                asset_path: ./target/release/${{ matrix.os.filename }}
                asset_name: ${{ matrix.os.filename }}
                asset_content_type: application/octet-stream
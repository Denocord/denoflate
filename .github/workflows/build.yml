name: Build - Rust

on:
    push:
        branches:
            - master
        paths:
            - src/**
            - .github/workflows/**
            - Cargo.toml

jobs:
    create_release:
        name: Create a GitHub release
        runs-on: ubuntu-latest
        outputs:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
        steps:
          - name: Create a release
            id: create_release
            uses: actions/create-release@v1
            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            with:
              tag_name: "release draft for ${{ github.sha }}"
              release_name: Build for ${{ github.sha }}
              draft: true
    build:
        name: Build for ${{ matrix.config.os }}
        runs-on: ${{ matrix.config.os }}
        needs: create_release
        timeout-minutes: 60
        strategy:
            matrix:
              config:
                - os: macos-latest
                  filename: libdenoflate.dylib
                - os: windows-latest
                  filename: denoflate.dll
                - os: ubuntu-latest
                  filename: libdenoflate.so
        steps:
            - name: Clone repository
              uses: actions/checkout@v2

            - name: Install rust
              uses: hecrj/setup-rust-action@v1
            
            - uses: actions/cache@v2
              with:
                  path: |
                    ~/.cargo/registry
                    ~/.cargo/git
                    target
                  key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}
              name: Cache cargo files
      
            - name: Build
              env:
                RUST_BACKTRACE: 1
              run: cargo build --release

            - name: Strip debug symbols
              if: matrix.config.os != 'windows-latest'
              run: |
                STRIPOPTS=""
                if uname | grep -qi "darwin"; then
                  STRIPOPTS="-x"
                fi
                strip $STRIPOPTS target/release/${{ matrix.config.filename }}

            - name: Upload Release Asset
              id: upload-release-asset 
              uses: actions/upload-release-asset@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                upload_url: ${{ needs.create_release.outputs.upload_url }}
                asset_path: ./target/release/${{ matrix.config.filename }}
                asset_name: ${{ matrix.config.filename }}
                asset_content_type: application/octet-stream
    build_wasm:
        name: Build for WASM
        runs-on: ubuntu-latest
        needs: create_release
        timeout-minutes: 60
        steps:
            - name: Clone repository
              uses: actions/checkout@v2

            - name: Install rust
              uses: hecrj/setup-rust-action@v1
            - run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
              name: Install wasm-pack
            - uses: actions/cache@v2
              with:
                  path: |
                    ~/.cargo/registry
                    ~/.cargo/git
                    target
                  key: wasm-cargo-${{ hashFiles('**/Cargo.toml') }}
              name: Cache cargo files
      
            - name: Build
              env:
                RUST_BACKTRACE: 1
              run: wasm-pack build --release --target web

            - name: Pack WASM for distribution
              uses: Denocord/deno-action@master
              with:
                  args: '["run", "--allow-read", "--allow-write", "dist-tools/pack-wasm.ts"]'

            - name: Upload Release Asset
              id: upload-release-asset 
              uses: actions/upload-release-asset@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                upload_url: ${{ needs.create_release.outputs.upload_url }}
                asset_path: ./wasm.js
                asset_name: wasm.js
                asset_content_type: application/javascript
